MIN_LENGTH = 15


class User:
    def __init__(self, nick, channel=None, markov_text=None):
        self.nick = nick
        self.channel = channel
        self.markov_text = markov_text

        self._previous_messages = set()

    def __str__(self):
        return self.nick

    def say(self, msg):
        if self.channel is None:
            raise ValueError("User not in channel")
        self.channel.user_say(self.nick, msg)

    def say_random(self, max_tries=50, avoid_duplicates=True):
        """Generate and say a sentence generated by the Markov chain."""
        s = self.markov_text.make_sentence(max_tries=max_tries)
        if s is None:
            return
        if avoid_duplicates:
            if s in self._previous_messages and len(s) >= MIN_LENGTH:
                return
            else:
                self._previous_messages.add(s)
        self.say(s)

    def join(self, channel):
        if self.channel is not None:
            raise ValueError("User already in channel")
        self.channel = channel
        self.channel.add(self)

    def leave(self):
        if self.channel is None:
            raise ValueError("User not in channel")
        self.channel.remove(self)
        self.channel = None

    def change_nick(self, new_nick):
        self.channel.change_nick(self.nick, new_nick)
        self.nick = new_nick


class RCBot(User):
    def say_rc(self, action, title, user, link, bytes, time, name):
        self.say(
            "[RC] {action} {title} by {user} - {link} {bytes}({time}) [Via {name}]".format(
                action=action,
                title=title,
                user=user,
                link=link,
                bytes="("+bytes+") " if bytes else "",
                time=time,
                name=name,
            )
        )
